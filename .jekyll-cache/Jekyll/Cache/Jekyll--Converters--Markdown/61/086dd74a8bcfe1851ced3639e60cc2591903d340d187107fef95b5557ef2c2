I"8<h1 id="google-summer--of-code-notes">Google summer  of code notes</h1>

<h2 id="multi-hosts-monitoring-set-up">Multi-hosts monitoring set up</h2>
<p>Follow <a href="https://pcp.readthedocs.io/en/latest/QG/RecordMetricsFromRemoteSystem.html">Record metrics from a remote system</a>
to set up the remote system (can be a virtual machine on the same computer).</p>

<p>On your local host,</p>
<ol>
  <li>
    <p>use <code class="language-plaintext highlighter-rouge">sudo vi /etc/hosts</code> to edit the hosts on your machine and add the new system mapping to the file.</p>
  </li>
  <li>go to <code class="language-plaintext highlighter-rouge">/etc/pcp/pmlogger</code>,
    <ul>
      <li>
        <p>The control <code class="language-plaintext highlighter-rouge">file</code> contains one line per host to be logged.</p>
      </li>
      <li>
        <p>The file <code class="language-plaintext highlighter-rouge">control.d</code> stores the config of each host</p>
      </li>
    </ul>
  </li>
  <li>Copy the local file and give it a name for your remote system. set n to primary option, which means this remote system is not primary, and your local machine should be primary system.
The arguments for the hosts are
    <ul>
      <li><code class="language-plaintext highlighter-rouge">-r</code>: creates the local config</li>
      <li><code class="language-plaintext highlighter-rouge">-T</code>: terminating cycle</li>
      <li><code class="language-plaintext highlighter-rouge">-c</code>: config file for pmlogger</li>
      <li><code class="language-plaintext highlighter-rouge">-v</code>: volume size. Once the archieve meets the set volume, a new archieve will be created.</li>
    </ul>
  </li>
  <li>
    <p>Use <code class="language-plaintext highlighter-rouge">sudo systemctl restart pmlogger</code> to restart pmlogger, and use
<code class="language-plaintext highlighter-rouge">sudo systemctl status pmlogger</code> to check its status.</p>
  </li>
  <li>Go to the dir <code class="language-plaintext highlighter-rouge">cd /var/log/pcp/pmlogger/shiyao_fedora</code> where stores the config of your second system to see details.
    <ul>
      <li>Files 20220726.15.27.* have all the metrics sent from redis. Once this file meets the set volume (the -v option), a new one with the same prefix will be created, and new data will be stored to the new files. and the old files will be compressed.</li>
      <li>File 20220726.15.27.index is a lookup table for the previous files. It’s used for a quicker data query.</li>
      <li>File 20220726.15.27.meta is the metadata from redis, it stores metric names, descriptors, labels and so on.</li>
      <li>File Latest is a PCP archive folio</li>
      <li>File pmlogger.log is created by -r option. It stores the query frequency for each metric.</li>
    </ul>
  </li>
  <li>
    <p>We can use <code class="language-plaintext highlighter-rouge">sudo systemctl stop pmproxy</code> to stop the new messages from redis, and use <code class="language-plaintext highlighter-rouge">sudo systemctl restart pmproxy</code> to restart the pmproxy and allow new messages from redis server.</p>
  </li>
  <li>We can use <code class="language-plaintext highlighter-rouge">pmseries -a 805f4cdf368337dd564c365909543cc86a39275e</code> to see where the data come from (local or remote).</li>
</ol>

<h2 id="special-notes">Special notes</h2>
<h3 id="what-if-qa-fails">What if qa fails</h3>
<p>Before running <code class="language-plaintext highlighter-rouge">./check ...</code>, run <code class="language-plaintext highlighter-rouge">pmseries --load "{source.path: \"PATH/pcp/qa/archives/proc\"}"</code>.</p>
<ul>
  <li>If unable to connect to redis server with the error msg ‘Segmentation fault (core dumped)’, try to run <code class="language-plaintext highlighter-rouge">sudo make clean</code> and rebuild the project. This should solve the segmentation fault problem.</li>
</ul>

<h2 id="early-june-week-1--week2">Early June (Week 1 &amp; Week2)</h2>
<ol>
  <li>Set up testing environment
    <ul>
      <li>Use the following commands to check which .so is linked
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which pmseries
ls -l /usr/local/lib
ls -l /usr/lib/libpcp*
ldd /usr/local/bin/pmseries
</code></pre></div>        </div>
        <p>and use</p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/libpcp_web.so.1
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/libpcp_web.so.1
</code></pre></div>        </div>
        <p>to link to the correct .so.1 file</p>
      </li>
    </ul>
  </li>
  <li>finsed time domain operations for <code class="language-plaintext highlighter-rouge">min()</code> and <code class="language-plaintext highlighter-rouge">max()</code> functions</li>
</ol>

<h3 id="notes">Notes</h3>
<ol>
  <li>
    <p>Use <code class="language-plaintext highlighter-rouge">sudo ./check -g pmseries</code> to run all pmseries tests, or use <code class="language-plaintext highlighter-rouge">sudo ./check 1886</code>to run a specific test.</p>
  </li>
  <li>If a function is implemented, remember to
    <ul>
      <li>run tests,</li>
      <li>update man pages, and</li>
      <li>run valgrind –leak-check=full</li>
    </ul>
  </li>
  <li>To update man pages, go to <code class="language-plaintext highlighter-rouge">/pcp/man/man1/pmseries.1</code> file and run <code class="language-plaintext highlighter-rouge">man ./pmseries.1</code> once new function descriptions are added</li>
  <li>Use <code class="language-plaintext highlighter-rouge">gdb --args pmseries "..."</code> to debug</li>
</ol>

<h2 id="late-june-week-3--week4">Late June (Week 3 &amp; Week4)</h2>
<ol>
  <li>Implemented time domain operation: <code class="language-plaintext highlighter-rouge">sum_sample()</code> and <code class="language-plaintext highlighter-rouge">avg_sample()</code></li>
  <li>Implemented time domain and instance domain operations for standard deviation, i.e. <code class="language-plaintext highlighter-rouge">stdev_inst()</code> and <code class="language-plaintext highlighter-rouge">stdev_sample()</code>.</li>
</ol>

<h3 id="notes-1">Notes</h3>
<ol>
  <li>Remember to update
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>np-&gt;value_set.series_values[i].series_desc.type
np-&gt;value_set.series_values[i].series_desc.semantics
np-&gt;value_set.series_values[i].series_desc.units
</code></pre></div>    </div>
    <p>if any operation is done to the original redis data.
Checkout 
<a href="https://man7.org/linux/man-pages/man3/pmsemstr.3.html">pmSemStr</a> and
<a href="https://man7.org/linux/man-pages/man3/pmUnitsStr.3.html">pmUnitsStr</a> for more information.</p>
  </li>
  <li>Try to test on multi-host environment: 
<a href="https://pcp.readthedocs.io/en/latest/QG/RecordMetricsFromRemoteSystem.html">Record metrics from a remote system</a></li>
</ol>

<h2 id="early-july-week-5--6">Early July (Week 5 &amp; 6)</h2>
<ol>
  <li>Implemented operations for <code class="language-plaintext highlighter-rouge">topk_inst()</code> and <code class="language-plaintext highlighter-rouge">topk_sample()</code>.</li>
</ol>

<h3 id="notes-2">Notes</h3>
<ol>
  <li>use <code class="language-plaintext highlighter-rouge">./new</code> to create a new qa tests under the qa folder.</li>
</ol>

<h2 id="late-july-week-7--8">Late July (Week 7 &amp; 8)</h2>
<ol>
  <li>Implemented <code class="language-plaintext highlighter-rouge">nth_percentile_inst()</code> and <code class="language-plaintext highlighter-rouge">nth_percentile_inst()</code>.</li>
</ol>

<h3 id="notes-3">Notes</h3>
<ol>
  <li><a href="https://github.com/HdrHistogram/HdrHistogram_c">HdrHistogram_c</a> provides examples for histogram function.
HDR stands for high dynamic range.</li>
</ol>

<p><a href=".././">back</a></p>
:ET